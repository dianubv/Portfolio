{"remainingRequest":"/home/diane/Documents/MDT/Portfolio/node_modules/babel-loader/lib/index.js??ref--2-1!/home/diane/Documents/MDT/Portfolio/.nuxt/index.js","dependencies":[{"path":"/home/diane/Documents/MDT/Portfolio/.nuxt/index.js","mtime":1697967626238},{"path":"/home/diane/Documents/MDT/Portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1696602851329},{"path":"/home/diane/Documents/MDT/Portfolio/node_modules/babel-loader/lib/index.js","mtime":1696602851385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwpmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH0KZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfQppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IE1ldGEgZnJvbSAndnVlLW1ldGEnOwppbXBvcnQgQ2xpZW50T25seSBmcm9tICd2dWUtY2xpZW50LW9ubHknOwppbXBvcnQgTm9Tc3IgZnJvbSAndnVlLW5vLXNzcic7CmltcG9ydCB7IGNyZWF0ZVJvdXRlciB9IGZyb20gJy4vcm91dGVyLmpzJzsKaW1wb3J0IE51eHRDaGlsZCBmcm9tICcuL2NvbXBvbmVudHMvbnV4dC1jaGlsZC5qcyc7CmltcG9ydCBOdXh0RXJyb3IgZnJvbSAnLi9jb21wb25lbnRzL251eHQtZXJyb3IudnVlJzsKaW1wb3J0IE51eHQgZnJvbSAnLi9jb21wb25lbnRzL251eHQuanMnOwppbXBvcnQgQXBwIGZyb20gJy4vQXBwLmpzJzsKaW1wb3J0IHsgc2V0Q29udGV4dCwgZ2V0TG9jYXRpb24sIGdldFJvdXRlRGF0YSwgbm9ybWFsaXplRXJyb3IgfSBmcm9tICcuL3V0aWxzJzsKCi8qIFBsdWdpbnMgKi8KCmltcG9ydCBudXh0X3BsdWdpbl9wbHVnaW5fNWYxMDgwOGMgZnJvbSAnbnV4dF9wbHVnaW5fcGx1Z2luXzVmMTA4MDhjJzsgLy8gU291cmNlOiAuL2NvbXBvbmVudHMvcGx1Z2luLmpzIChtb2RlOiAnYWxsJykKaW1wb3J0IG51eHRfcGx1Z2luX3BsdWdpbmNsaWVudF83ODA3MjYwOCBmcm9tICdudXh0X3BsdWdpbl9wbHVnaW5jbGllbnRfNzgwNzI2MDgnOyAvLyBTb3VyY2U6IC4vY29udGVudC9wbHVnaW4uY2xpZW50LmpzIChtb2RlOiAnY2xpZW50JykKaW1wb3J0IG51eHRfcGx1Z2luX3BsdWdpbnNlcnZlcl80NDdlZDBlMCBmcm9tICdudXh0X3BsdWdpbl9wbHVnaW5zZXJ2ZXJfNDQ3ZWQwZTAnOyAvLyBTb3VyY2U6IC4vY29udGVudC9wbHVnaW4uc2VydmVyLmpzIChtb2RlOiAnc2VydmVyJykKaW1wb3J0IG51eHRfcGx1Z2luX2ltYWdlXzA5ZWQxYTlkIGZyb20gJ251eHRfcGx1Z2luX2ltYWdlXzA5ZWQxYTlkJzsgLy8gU291cmNlOiAuL2ltYWdlLmpzIChtb2RlOiAnYWxsJykKaW1wb3J0IG51eHRfcGx1Z2luX2dzYXBNb2R1bGVfOGM4OGI2MjIgZnJvbSAnbnV4dF9wbHVnaW5fZ3NhcE1vZHVsZV84Yzg4YjYyMic7IC8vIFNvdXJjZTogLi9nc2FwTW9kdWxlLmpzIChtb2RlOiAnYWxsJykKaW1wb3J0IG51eHRfcGx1Z2luX2hvdmVyZGlyZWN0aXZlY2xpZW50X2ZiNjY0Yjc0IGZyb20gJ251eHRfcGx1Z2luX2hvdmVyZGlyZWN0aXZlY2xpZW50X2ZiNjY0Yjc0JzsgLy8gU291cmNlOiAuLi9wbHVnaW5zL251eHQvaG92ZXItZGlyZWN0aXZlLmNsaWVudC5qcyAobW9kZTogJ2NsaWVudCcpCmltcG9ydCBudXh0X3BsdWdpbl9wcmVmZXJzcmVkdWNlZG1vdGlvbl80MzE4YzU5YyBmcm9tICdudXh0X3BsdWdpbl9wcmVmZXJzcmVkdWNlZG1vdGlvbl80MzE4YzU5Yyc7IC8vIFNvdXJjZTogLi4vcGx1Z2lucy9udXh0L3ByZWZlcnMtcmVkdWNlZC1tb3Rpb24uanMgKG1vZGU6ICdhbGwnKQppbXBvcnQgbnV4dF9wbHVnaW5fc21vb3Roc2Nyb2xsY2xpZW50X2RmNjY3M2Q4IGZyb20gJ251eHRfcGx1Z2luX3Ntb290aHNjcm9sbGNsaWVudF9kZjY2NzNkOCc7IC8vIFNvdXJjZTogLi4vcGx1Z2lucy9udXh0L3Ntb290aC1zY3JvbGwuY2xpZW50LmpzIChtb2RlOiAnY2xpZW50JykKCi8vIENvbXBvbmVudDogPENsaWVudE9ubHk+ClZ1ZS5jb21wb25lbnQoQ2xpZW50T25seS5uYW1lLCBDbGllbnRPbmx5KTsKCi8vIFRPRE86IFJlbW92ZSBpbiBOdXh0IDM6IDxOb1Nzcj4KVnVlLmNvbXBvbmVudChOb1Nzci5uYW1lLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIE5vU3NyKSwge30sIHsKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoLCBjdHgpIHsKICAgIGlmIChwcm9jZXNzLmNsaWVudCAmJiAhTm9Tc3IuX3dhcm5lZCkgewogICAgICBOb1Nzci5fd2FybmVkID0gdHJ1ZTsKICAgICAgY29uc29sZS53YXJuKCc8bm8tc3NyPiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gTnV4dCAzLCBwbGVhc2UgdXNlIDxjbGllbnQtb25seT4gaW5zdGVhZCcpOwogICAgfQogICAgcmV0dXJuIE5vU3NyLnJlbmRlcihoLCBjdHgpOwogIH0KfSkpOwoKLy8gQ29tcG9uZW50OiA8TnV4dENoaWxkPgpWdWUuY29tcG9uZW50KE51eHRDaGlsZC5uYW1lLCBOdXh0Q2hpbGQpOwpWdWUuY29tcG9uZW50KCdOQ2hpbGQnLCBOdXh0Q2hpbGQpOwoKLy8gQ29tcG9uZW50IE51eHRMaW5rIGlzIGltcG9ydGVkIGluIHNlcnZlci5qcyBvciBjbGllbnQuanMKCi8vIENvbXBvbmVudDogPE51eHQ+ClZ1ZS5jb21wb25lbnQoTnV4dC5uYW1lLCBOdXh0KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckbnV4dCcsIHsKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiB0aGlzLiRyb290LiRvcHRpb25zLiRudXh0OwogIH0sCiAgY29uZmlndXJhYmxlOiB0cnVlCn0pOwpWdWUudXNlKE1ldGEsIHsKICAia2V5TmFtZSI6ICJoZWFkIiwKICAiYXR0cmlidXRlIjogImRhdGEtbi1oZWFkIiwKICAic3NyQXR0cmlidXRlIjogImRhdGEtbi1oZWFkLXNzciIsCiAgInRhZ0lES2V5TmFtZSI6ICJoaWQiCn0pOwp2YXIgZGVmYXVsdFRyYW5zaXRpb24gPSB7CiAgIm5hbWUiOiAicGFnZSIsCiAgIm1vZGUiOiAib3V0LWluIiwKICAiYXBwZWFyIjogZmFsc2UsCiAgImFwcGVhckNsYXNzIjogImFwcGVhciIsCiAgImFwcGVhckFjdGl2ZUNsYXNzIjogImFwcGVhci1hY3RpdmUiLAogICJhcHBlYXJUb0NsYXNzIjogImFwcGVhci10byIKfTsKZnVuY3Rpb24gY3JlYXRlQXBwKF94KSB7CiAgcmV0dXJuIF9jcmVhdGVBcHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQpmdW5jdGlvbiBfY3JlYXRlQXBwKCkgewogIF9jcmVhdGVBcHAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHNzckNvbnRleHQpIHsKICAgIHZhciBjb25maWcsCiAgICAgIHJvdXRlciwKICAgICAgYXBwLAogICAgICBuZXh0LAogICAgICByb3V0ZSwKICAgICAgcGF0aCwKICAgICAgaW5qZWN0LAogICAgICBfYXJnczIgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgaW5qZWN0ID0gZnVuY3Rpb24gX2luamVjdChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICgha2V5KSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbmplY3Qoa2V5LCB2YWx1ZSkgaGFzIG5vIGtleSBwcm92aWRlZCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbmplY3QoJyIuY29uY2F0KGtleSwgIicsIHZhbHVlKSBoYXMgbm8gdmFsdWUgcHJvdmlkZWQiKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAga2V5ID0gJyQnICsga2V5OwogICAgICAgICAgICAvLyBBZGQgaW50byBhcHAKICAgICAgICAgICAgYXBwW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgLy8gQWRkIGludG8gY29udGV4dAogICAgICAgICAgICBpZiAoIWFwcC5jb250ZXh0W2tleV0pIHsKICAgICAgICAgICAgICBhcHAuY29udGV4dFtrZXldID0gdmFsdWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHBsdWdpbiBub3QgYWxyZWFkeSBpbnN0YWxsZWQKICAgICAgICAgICAgdmFyIGluc3RhbGxLZXkgPSAnX19udXh0XycgKyBrZXkgKyAnX2luc3RhbGxlZF9fJzsKICAgICAgICAgICAgaWYgKFZ1ZVtpbnN0YWxsS2V5XSkgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBWdWVbaW5zdGFsbEtleV0gPSB0cnVlOwogICAgICAgICAgICAvLyBDYWxsIFZ1ZS51c2UoKSB0byBpbnN0YWxsIHRoZSBwbHVnaW4gaW50byB2bQogICAgICAgICAgICBWdWUudXNlKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChWdWUucHJvdG90eXBlLCBrZXkpKSB7CiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwga2V5LCB7CiAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRyb290LiRvcHRpb25zW2tleV07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9OwogICAgICAgICAgY29uZmlnID0gX2FyZ3MyLmxlbmd0aCA+IDEgJiYgX2FyZ3MyWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnczJbMV0gOiB7fTsKICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgIHJldHVybiBjcmVhdGVSb3V0ZXIoc3NyQ29udGV4dCwgY29uZmlnKTsKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICByb3V0ZXIgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgIC8vIENyZWF0ZSBSb290IGluc3RhbmNlCiAgICAgICAgICAvLyBoZXJlIHdlIGluamVjdCB0aGUgcm91dGVyIGFuZCBzdG9yZSB0byBhbGwgY2hpbGQgY29tcG9uZW50cywKICAgICAgICAgIC8vIG1ha2luZyB0aGVtIGF2YWlsYWJsZSBldmVyeXdoZXJlIGFzIGB0aGlzLiRyb3V0ZXJgIGFuZCBgdGhpcy4kc3RvcmVgLgogICAgICAgICAgYXBwID0gX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgIGhlYWQ6IHsKICAgICAgICAgICAgICAiaHRtbEF0dHJzIjogewogICAgICAgICAgICAgICAgImxhbmciOiAiZW4iLAogICAgICAgICAgICAgICAgImRpciI6ICJsdHIiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidGl0bGUiOiAiRGlhbmUgQm91ZmZhcmQtVmVyY2VsbGkgfCBQb3J0Zm9saW8iLAogICAgICAgICAgICAgICJtZXRhIjogW3sKICAgICAgICAgICAgICAgICJjaGFyc2V0IjogInV0ZjgiCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgImh0dHAtZXF1aXYiOiAiWC1VQS1Db21wYXRpYmxlIiwKICAgICAgICAgICAgICAgICJjb250ZW50IjogIklFPWVkZ2UiCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIm5hbWUiOiAidmlld3BvcnQiLAogICAgICAgICAgICAgICAgImNvbnRlbnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIKICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAibGluayI6IFtdLAogICAgICAgICAgICAgICJzdHlsZSI6IFtdLAogICAgICAgICAgICAgICJzY3JpcHQiOiBbXQogICAgICAgICAgICB9LAogICAgICAgICAgICByb3V0ZXI6IHJvdXRlciwKICAgICAgICAgICAgbnV4dDogewogICAgICAgICAgICAgIGRlZmF1bHRUcmFuc2l0aW9uOiBkZWZhdWx0VHJhbnNpdGlvbiwKICAgICAgICAgICAgICB0cmFuc2l0aW9uczogW2RlZmF1bHRUcmFuc2l0aW9uXSwKICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uczogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbnModHJhbnNpdGlvbnMpIHsKICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0cmFuc2l0aW9ucykpIHsKICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMgPSBbdHJhbnNpdGlvbnNdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucy5tYXAoZnVuY3Rpb24gKHRyYW5zaXRpb24pIHsKICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2l0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiA9IGRlZmF1bHRUcmFuc2l0aW9uOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cmFuc2l0aW9uID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0VHJhbnNpdGlvbiwgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogdHJhbnNpdGlvbgogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0VHJhbnNpdGlvbiwgdHJhbnNpdGlvbik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb247CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHRoaXMuJG9wdGlvbnMubnV4dC50cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zOwogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25zOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZXJyOiBudWxsLAogICAgICAgICAgICAgIGRhdGVFcnI6IG51bGwsCiAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGVycikgewogICAgICAgICAgICAgICAgZXJyID0gZXJyIHx8IG51bGw7CiAgICAgICAgICAgICAgICBhcHAuY29udGV4dC5fZXJyb3JlZCA9IEJvb2xlYW4oZXJyKTsKICAgICAgICAgICAgICAgIGVyciA9IGVyciA/IG5vcm1hbGl6ZUVycm9yKGVycikgOiBudWxsOwogICAgICAgICAgICAgICAgdmFyIG51eHQgPSBhcHAubnV4dDsgLy8gdG8gd29yayB3aXRoIEB2dWUvY29tcG9zaXRpb24tYXBpLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL251eHQvbnV4dC5qcy9pc3N1ZXMvNjUxNyNpc3N1ZWNvbW1lbnQtNTczMjgwMjA3CiAgICAgICAgICAgICAgICBpZiAodGhpcykgewogICAgICAgICAgICAgICAgICBudXh0ID0gdGhpcy5udXh0IHx8IHRoaXMuJG9wdGlvbnMubnV4dDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG51eHQuZGF0ZUVyciA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICBudXh0LmVyciA9IGVycjsKICAgICAgICAgICAgICAgIC8vIFVzZWQgaW4gc3JjL3NlcnZlci5qcwogICAgICAgICAgICAgICAgaWYgKHNzckNvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgc3NyQ29udGV4dC5udXh0LmVycm9yID0gZXJyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGVycjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIEFwcCk7CiAgICAgICAgICBuZXh0ID0gc3NyQ29udGV4dCA/IHNzckNvbnRleHQubmV4dCA6IGZ1bmN0aW9uIChsb2NhdGlvbikgewogICAgICAgICAgICByZXR1cm4gYXBwLnJvdXRlci5wdXNoKGxvY2F0aW9uKTsKICAgICAgICAgIH07IC8vIFJlc29sdmUgcm91dGUKICAgICAgICAgIGlmIChzc3JDb250ZXh0KSB7CiAgICAgICAgICAgIHJvdXRlID0gcm91dGVyLnJlc29sdmUoc3NyQ29udGV4dC51cmwpLnJvdXRlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcGF0aCA9IGdldExvY2F0aW9uKHJvdXRlci5vcHRpb25zLmJhc2UsIHJvdXRlci5vcHRpb25zLm1vZGUpOwogICAgICAgICAgICByb3V0ZSA9IHJvdXRlci5yZXNvbHZlKHBhdGgpLnJvdXRlOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIFNldCBjb250ZXh0IHRvIGFwcC5jb250ZXh0CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEwOwogICAgICAgICAgcmV0dXJuIHNldENvbnRleHQoYXBwLCB7CiAgICAgICAgICAgIHJvdXRlOiByb3V0ZSwKICAgICAgICAgICAgbmV4dDogbmV4dCwKICAgICAgICAgICAgZXJyb3I6IGFwcC5udXh0LmVycm9yLmJpbmQoYXBwKSwKICAgICAgICAgICAgcGF5bG9hZDogc3NyQ29udGV4dCA/IHNzckNvbnRleHQucGF5bG9hZCA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgcmVxOiBzc3JDb250ZXh0ID8gc3NyQ29udGV4dC5yZXEgOiB1bmRlZmluZWQsCiAgICAgICAgICAgIHJlczogc3NyQ29udGV4dCA/IHNzckNvbnRleHQucmVzIDogdW5kZWZpbmVkLAogICAgICAgICAgICBiZWZvcmVSZW5kZXJGbnM6IHNzckNvbnRleHQgPyBzc3JDb250ZXh0LmJlZm9yZVJlbmRlckZucyA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgc3NyQ29udGV4dDogc3NyQ29udGV4dAogICAgICAgICAgfSk7CiAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIC8vIEluamVjdCBydW50aW1lIGNvbmZpZyBhcyAkY29uZmlnCiAgICAgICAgICBpbmplY3QoJ2NvbmZpZycsIGNvbmZpZyk7CgogICAgICAgICAgLy8gQWRkIGVuYWJsZVByZXZpZXcocHJldmlld0RhdGEgPSB7fSkgaW4gY29udGV4dCBmb3IgcGx1Z2lucwogICAgICAgICAgaWYgKHByb2Nlc3Muc3RhdGljICYmIHByb2Nlc3MuY2xpZW50KSB7CiAgICAgICAgICAgIGFwcC5jb250ZXh0LmVuYWJsZVByZXZpZXcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgdmFyIHByZXZpZXdEYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgICAgICAgICBhcHAucHJldmlld0RhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBwcmV2aWV3RGF0YSk7CiAgICAgICAgICAgICAgaW5qZWN0KCdwcmV2aWV3JywgcHJldmlld0RhdGEpOwogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgLy8gUGx1Z2luIGV4ZWN1dGlvbgogICAgICAgICAgaWYgKCEodHlwZW9mIG51eHRfcGx1Z2luX3BsdWdpbl81ZjEwODA4YyA9PT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1OwogICAgICAgICAgcmV0dXJuIG51eHRfcGx1Z2luX3BsdWdpbl81ZjEwODA4YyhhcHAuY29udGV4dCwgaW5qZWN0KTsKICAgICAgICBjYXNlIDE1OgogICAgICAgICAgaWYgKCEocHJvY2Vzcy5jbGllbnQgJiYgdHlwZW9mIG51eHRfcGx1Z2luX3BsdWdpbmNsaWVudF83ODA3MjYwOCA9PT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxODsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE4OwogICAgICAgICAgcmV0dXJuIG51eHRfcGx1Z2luX3BsdWdpbmNsaWVudF83ODA3MjYwOChhcHAuY29udGV4dCwgaW5qZWN0KTsKICAgICAgICBjYXNlIDE4OgogICAgICAgICAgaWYgKCEocHJvY2Vzcy5zZXJ2ZXIgJiYgdHlwZW9mIG51eHRfcGx1Z2luX3BsdWdpbnNlcnZlcl80NDdlZDBlMCA9PT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIxOwogICAgICAgICAgcmV0dXJuIG51eHRfcGx1Z2luX3BsdWdpbnNlcnZlcl80NDdlZDBlMChhcHAuY29udGV4dCwgaW5qZWN0KTsKICAgICAgICBjYXNlIDIxOgogICAgICAgICAgaWYgKCEodHlwZW9mIG51eHRfcGx1Z2luX2ltYWdlXzA5ZWQxYTlkID09PSAnZnVuY3Rpb24nKSkgewogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI0OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjQ7CiAgICAgICAgICByZXR1cm4gbnV4dF9wbHVnaW5faW1hZ2VfMDllZDFhOWQoYXBwLmNvbnRleHQsIGluamVjdCk7CiAgICAgICAgY2FzZSAyNDoKICAgICAgICAgIGlmICghKHR5cGVvZiBudXh0X3BsdWdpbl9nc2FwTW9kdWxlXzhjODhiNjIyID09PSAnZnVuY3Rpb24nKSkgewogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI3OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjc7CiAgICAgICAgICByZXR1cm4gbnV4dF9wbHVnaW5fZ3NhcE1vZHVsZV84Yzg4YjYyMihhcHAuY29udGV4dCwgaW5qZWN0KTsKICAgICAgICBjYXNlIDI3OgogICAgICAgICAgaWYgKCEocHJvY2Vzcy5jbGllbnQgJiYgdHlwZW9mIG51eHRfcGx1Z2luX2hvdmVyZGlyZWN0aXZlY2xpZW50X2ZiNjY0Yjc0ID09PSAnZnVuY3Rpb24nKSkgewogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDMwOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzA7CiAgICAgICAgICByZXR1cm4gbnV4dF9wbHVnaW5faG92ZXJkaXJlY3RpdmVjbGllbnRfZmI2NjRiNzQoYXBwLmNvbnRleHQsIGluamVjdCk7CiAgICAgICAgY2FzZSAzMDoKICAgICAgICAgIGlmICghKHR5cGVvZiBudXh0X3BsdWdpbl9wcmVmZXJzcmVkdWNlZG1vdGlvbl80MzE4YzU5YyA9PT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzMzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDMzOwogICAgICAgICAgcmV0dXJuIG51eHRfcGx1Z2luX3ByZWZlcnNyZWR1Y2VkbW90aW9uXzQzMThjNTljKGFwcC5jb250ZXh0LCBpbmplY3QpOwogICAgICAgIGNhc2UgMzM6CiAgICAgICAgICBpZiAoIShwcm9jZXNzLmNsaWVudCAmJiB0eXBlb2YgbnV4dF9wbHVnaW5fc21vb3Roc2Nyb2xsY2xpZW50X2RmNjY3M2Q4ID09PSAnZnVuY3Rpb24nKSkgewogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM2OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzY7CiAgICAgICAgICByZXR1cm4gbnV4dF9wbHVnaW5fc21vb3Roc2Nyb2xsY2xpZW50X2RmNjY3M2Q4KGFwcC5jb250ZXh0LCBpbmplY3QpOwogICAgICAgIGNhc2UgMzY6CiAgICAgICAgICAvLyBMb2NrIGVuYWJsZVByZXZpZXcgaW4gY29udGV4dAogICAgICAgICAgaWYgKHByb2Nlc3Muc3RhdGljICYmIHByb2Nlc3MuY2xpZW50KSB7CiAgICAgICAgICAgIGFwcC5jb250ZXh0LmVuYWJsZVByZXZpZXcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdZb3UgY2Fubm90IGNhbGwgZW5hYmxlUHJldmlldygpIG91dHNpZGUgYSBwbHVnaW4uJyk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgLy8gSWYgc2VydmVyLXNpZGUsIHdhaXQgZm9yIGFzeW5jIGNvbXBvbmVudCB0byBiZSByZXNvbHZlZCBmaXJzdAogICAgICAgICAgaWYgKCEocHJvY2Vzcy5zZXJ2ZXIgJiYgc3NyQ29udGV4dCAmJiBzc3JDb250ZXh0LnVybCkpIHsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0MDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQwOwogICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgcm91dGVyLnB1c2goc3NyQ29udGV4dC51cmwsIHJlc29sdmUsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9ibG9iL3YzLjQuMy9zcmMvdXRpbC9lcnJvcnMuanMKICAgICAgICAgICAgICBpZiAoIWVyci5faXNSb3V0ZXIpIHJldHVybiByZWplY3QoZXJyKTsKICAgICAgICAgICAgICBpZiAoZXJyLnR5cGUgIT09IDIgLyogTmF2aWdhdGlvbkZhaWx1cmVUeXBlLnJlZGlyZWN0ZWQgKi8pIHJldHVybiByZXNvbHZlKCk7CgogICAgICAgICAgICAgIC8vIG5hdmlnYXRlZCB0byBhIGRpZmZlcmVudCByb3V0ZSBpbiByb3V0ZXIgZ3VhcmQKICAgICAgICAgICAgICB2YXIgdW5yZWdpc3RlciA9IHJvdXRlci5hZnRlckVhY2goIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh0bywgZnJvbSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICBzc3JDb250ZXh0LnVybCA9IHRvLmZ1bGxQYXRoOwogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFJvdXRlRGF0YSh0byk7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5jb250ZXh0LnJvdXRlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmNvbnRleHQucGFyYW1zID0gdG8ucGFyYW1zIHx8IHt9OwogICAgICAgICAgICAgICAgICAgICAgICBhcHAuY29udGV4dC5xdWVyeSA9IHRvLnF1ZXJ5IHx8IHt9OwogICAgICAgICAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gyLCBfeDMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSgpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICBjYXNlIDQwOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgYXBwOiBhcHAsCiAgICAgICAgICAgIHJvdXRlcjogcm91dGVyCiAgICAgICAgICB9KTsKICAgICAgICBjYXNlIDQxOgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKICByZXR1cm4gX2NyZWF0ZUFwcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CmV4cG9ydCB7IGNyZWF0ZUFwcCwgTnV4dEVycm9yIH07"},null]}
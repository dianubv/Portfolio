{"remainingRequest":"/home/diane/Documents/MDT/Portfolio/node_modules/babel-loader/lib/index.js??ref--2-1!/home/diane/Documents/MDT/Portfolio/.nuxt/App.js","dependencies":[{"path":"/home/diane/Documents/MDT/Portfolio/.nuxt/App.js","mtime":1697969260229},{"path":"/home/diane/Documents/MDT/Portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1696602851329},{"path":"/home/diane/Documents/MDT/Portfolio/node_modules/babel-loader/lib/index.js","mtime":1696602851385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
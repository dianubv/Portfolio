{"remainingRequest":"/home/diane/Documents/MDT/Portfolio/node_modules/babel-loader/lib/index.js??ref--2-1!/home/diane/Documents/MDT/Portfolio/.nuxt/client.js","dependencies":[{"path":"/home/diane/Documents/MDT/Portfolio/.nuxt/client.js","mtime":1697967626238},{"path":"/home/diane/Documents/MDT/Portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1696602851329},{"path":"/home/diane/Documents/MDT/Portfolio/node_modules/babel-loader/lib/index.js","mtime":1696602851385}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}